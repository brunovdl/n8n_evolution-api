version: '3.9'

networks:
  app_network:
    driver: bridge

volumes:
  # Volumes para o n8n e seu banco de dados
  pgdata_n8n:
  n8n_data:
  # Volumes para a API Evolution e suas dependências
  pgdata_evolution:
  evolution_instances:
  evolution_redis:

services:
  # --- STACK N8N ---

  # Banco de Dados PostgreSQL para o n8n
  postgres_n8n:
    container_name: postgres_n8n_db
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n_db}
      POSTGRES_USER: ${POSTGRES_USER:-n8n_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_n8n:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Serviço de Automação n8n
  n8n:
    container_name: n8n_container
    image: n8nio/n8n:latest
    restart: unless-stopped
    depends_on:
      postgres_n8n:
        condition: service_healthy
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      # Garante que o host aponte para o serviço postgres do n8n renomeado
      - DB_POSTGRESDB_HOST=postgres_n8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n_db}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n_user}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://${N8N_HOST:-localhost}:5678/
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
      - N8N_SECURE_COOKIE=false
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app_network

  # --- STACK API EVOLUTION ---

  # Banco de Dados PostgreSQL para a API Evolution
  postgres_evolution:
    container_name: postgres_evolution_db
    image: postgres:15
    restart: always
    command: ["postgres", "-c", "max_connections=1000", "-c", "listen_addresses=*"]
    ports:
      # Usando a porta 5433 para evitar conflito com a outra instância postgres
      - "5433:5432"
    env_file:
      - .env
    volumes:
      - pgdata_evolution:/var/lib/postgresql/data
    networks:
      - app_network

  # Serviço Redis para a API Evolution
  redis:
    container_name: redis_evolution
    image: redis:latest
    restart: always
    command: >
      redis-server --port 6379 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - evolution_redis:/data
    networks:
      - app_network

  # Serviço da API Evolution
  api:
    container_name: evolution_api
    image: atendai/evolution-api:latest
    restart: always
    depends_on:
      - redis
      - postgres_evolution
    ports:
      - "8080:8080"
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - app_network
    env_file:
      - .env